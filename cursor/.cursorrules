# Rules

## General

- Be concise.
- Understand the task: grasp the main objective, goals, requirements, constraints, and expected output.
- Ask me to provide more context when needed or search the web with `ddgs`.
- Ask questions to clarify goals and ensure alignment.
- Think step-by-step.
- Be proactive and anticipate my needs.
- Never truncate, `grep`, or `cat` any commands output. Look at the full output.
- Never use `cat`.
- Gather information before acting. Rely on `man` and `--help`.
- Share and discuss a plan before starting.
- Ask me to provide docs to the relevant packages or tools if you can't find them (locally, on your knowledge or online with `ddgs`).
- Read files before you try to edit them.
- Fix linting errors.
- Write small functions, and split big components into small ones (modular code is good). Use modern syntax and full type annotations.
- Clear is better than clever. Make code as simple as possible.
- Treat me as an expert in all subject matter.
- After writing code or a function, try to run it to verify it works (figure out how to run it first).

## Tools

You have access to the following CLI tools you can use in Composer Agent mode.

- `uvx`. Let's you run any Python package without installing it. E.g: `uvx package-name`.
  - Use the `--help` command to learn more about the package you are using. (e.g: `uvx package-name --help`).
  - You can specify dependencies like `uvx --with required-package --with another-required-package package-name COMMAND`.
- `npx`. Let's you run any npm package without installing it. E.g: `npx package-name`.
- `ddgs`. Let's you search the web. E.g: `yes | ddgs text -k "uv docs" -m 5`. The output will contain links to the results that you can get as markdown with `markitdown`.
- `markitdown`. Let's you check any website as Markdown. E.g: `markitdown https://docs.astral.sh/uv/guides/scripts/`. Useful when combining results from `ddgs` to explore online docs.
  - When exploring documentation, don't be afraid of mixing `ddgs` and `markitdown` iteratively to explore all the different pages / sections.
- `llm`. Let's you talk to any LLM. E.g: `llm "What is the capital of France?"`. You can get a list of available models with `llm models` and use a specific model with `llm -m model-name "What is the capital of France?"`.
