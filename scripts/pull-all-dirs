#!/bin/bash

# pull-all-dirs - Pull git repositories in all subdirectories that are behind upstream
# Usage: pull-all-dirs [directory]

set -euo pipefail

# Default to current directory if no argument provided
target_dir="${1:-.}"

# Check if target directory exists
if [[ ! -d "$target_dir" ]]; then
    echo "Error: Directory '$target_dir' does not exist" >&2
    exit 1
fi

# Change to target directory
cd "$target_dir"

# Track repositories that were updated
updated_repos=()

# Loop through all subdirectories
for dir in */; do
    # Skip if not a directory
    [[ -d "$dir" ]] || continue
    
    # Enter directory
    if ! cd "$dir"; then
        echo "Warning: Could not enter directory '$dir'" >&2
        continue
    fi
    
    # Check if it's a git repository
    if [[ ! -d .git ]]; then
        cd ..
        continue
    fi
    
    # Update remote references
    if ! git remote update >/dev/null 2>&1; then
        echo "Warning: Could not update remotes for '$dir'" >&2
        cd ..
        continue
    fi
    
    # Check if branch is behind upstream
    if git status -uno | grep -q "Your branch is behind"; then
        echo "Pulling updates for: $dir"
        if git pull; then
            updated_repos+=("$dir")
        else
            echo "Error: Failed to pull updates for '$dir'" >&2
        fi
    fi
    
    # Return to parent directory
    cd ..
done

# Summary
if [[ ${#updated_repos[@]} -eq 0 ]]; then
    echo "All repositories are up to date."
else
    echo "Updated ${#updated_repos[@]} repository/repositories:"
    printf "  - %s\n" "${updated_repos[@]}"
fi